(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{105:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return d}));var a=n(1),i=n(6),o=(n(0),n(148)),r={id:"use-notification-center",title:"useNotificationCenter",sidebar_label:"useNotificationCenter"},c={id:"addons/use-notification-center",title:"useNotificationCenter",description:"`useNotificationCenter` is a headless hook to build your notification center on top of react-toastify. In short, every time you call `toast` or any other variants like `toast.update`, `toast.promise`, `toast.info`, etc, the notification will be added to the toast center.",source:"@site/docs/addons/use-notification-center.md",permalink:"/react-toastify/addons/use-notification-center",editUrl:"https://github.com/fkhadra/react-toastify-doc/edit/master/docs/addons/use-notification-center.md",sidebar_label:"useNotificationCenter",sidebar:"someSidebar",previous:{title:"Dispatch toast outside of react component",permalink:"/react-toastify/dispatch-toast-outside-of-react-component"},next:{title:"ToastContainer",permalink:"/react-toastify/api/toast-container"}},l=[{value:"Import",id:"import",children:[]},{value:"Initial parameters",id:"initial-parameters",children:[]},{value:"API",id:"api",children:[{value:"<code>notifications</code>",id:"notifications",children:[]},{value:"<code>clear</code>",id:"clear",children:[]},{value:"<code>markAllAsRead</code>",id:"markallasread",children:[]},{value:"<code>markAsRead</code>",id:"markasread",children:[]},{value:"<code>unreadCount</code>",id:"unreadcount",children:[]},{value:"<code>remove</code>",id:"remove",children:[]},{value:"<code>sort</code>",id:"sort",children:[]},{value:"<code>add</code>",id:"add",children:[]},{value:"<code>update</code>",id:"update",children:[]},{value:"<code>find</code>",id:"find",children:[]}]}],s={rightToc:l};function d(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"useNotificationCenter")," is a headless hook to build your notification center on top of react-toastify. In short, every time you call ",Object(o.b)("inlineCode",{parentName:"p"},"toast")," or any other variants like ",Object(o.b)("inlineCode",{parentName:"p"},"toast.update"),", ",Object(o.b)("inlineCode",{parentName:"p"},"toast.promise"),", ",Object(o.b)("inlineCode",{parentName:"p"},"toast.info"),", etc, the notification will be added to the toast center."),Object(o.b)("p",null,"It offers a lot of flexibility out of the box like ",Object(o.b)("inlineCode",{parentName:"p"},"sorting"),", ",Object(o.b)("inlineCode",{parentName:"p"},"filtering"),", etc... "),Object(o.b)("p",null,"Check the example below."),Object(o.b)("iframe",{src:"https://codesandbox.io/embed/notification-center-framer-vddoj5?fontsize=14&hidenavigation=1&hidedevtools=1&view=preview&codemirror=1&theme=dark",style:{width:"100%",height:"700px",border:0,borderRadius:"4px",overflow:"hidden"},title:"notification-center-framer",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),Object(o.b)("p",null,"Another example using MUI."),Object(o.b)("iframe",{src:"https://codesandbox.io/embed/mui-notification-center-zvxod3?fontsize=14&hidenavigation=1&hidedevtools=1&view=preview&codemirror=1&theme=dark",style:{width:"100%",height:"700px",border:0,borderRadius:"4px",overflow:"hidden"},title:"mui-notification-center",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),Object(o.b)("h2",{id:"import"},"Import"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { useNotificationCenter } from "react-toastify/addons/useNotificationCenter"\n')),Object(o.b)("h2",{id:"initial-parameters"},"Initial parameters"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { useNotificationCenter } from "react-toastify/addons/useNotificationCenter"\n\ninterface Data {\n  exclude: boolean\n}\n\nfunction App(){\n  const { notifications } = useNotificationCenter<Data>({\n    data: [\n      {id: "anId", createdAt: Date.now(), data: { exclude: false }},\n      {id: "anotherId", createdAt: Date.now(), data: { exclude: true }}\n      ],\n    sort: (l, r) => l.createdAt - r.createdAt,\n    filter: (item) => item.data.exclude === false\n  })\n}\n\n')),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Parameter"),Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"data?: NotificationCenterItem<Data>[]")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Initial data to rehydrate the notification center. Useful if you want to persist the content of the notification center")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"sort?: (l: NotificationCenterItem<Data>, r: NotificationCenterItem<Data>): number")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"By default, the notifications are sorted from the newest to the oldest using the ",Object(o.b)("inlineCode",{parentName:"td"},"createdAt")," field. Use this to provide your sort function")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("inlineCode",{parentName:"td"},"filter?: (item: NotificationCenterItem<Data>): boolean")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Keep the toast that meets the condition specified in the callback function.")))),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"}," All parameters are optional"))),Object(o.b)("h2",{id:"api"},"API"),Object(o.b)("p",null,"The hook gives you access to several values and functions. Let's view them one by one."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { useNotificationCenter } from "react-toastify/addons/useNotificationCenter"\n\nconst {\n    notifications,\n    clear,\n    markAllAsRead,\n    markAsRead,\n    add,\n    update,\n    remove,\n    find,\n    sort,\n    unreadCount\n} = useNotificationCenter()\n')),Object(o.b)("h3",{id:"notifications"},Object(o.b)("inlineCode",{parentName:"h3"},"notifications")),Object(o.b)("p",null,"Contains an array of ",Object(o.b)("inlineCode",{parentName:"p"},"NotificationItem"),". The ",Object(o.b)("inlineCode",{parentName:"p"},"NotificationItem")," has the following interface"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"interface NotificationCenter <Data = {}> {\n  id: Id\n  read: boolean;\n  createdAt: number;\n  data: Data;\n  content?: React.ReactNode\n  theme?: Theme\n  type?: TypeOptions;\n  isLoading?: boolean;\n  containerId?: Id;\n  icon?: React.ReactNode | false;\n}\n")),Object(o.b)("p",null,"Most of the properties are populated when you display a notification on the screen using the ",Object(o.b)("inlineCode",{parentName:"p"},"toast")," function. A typical usage would look like this."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { useNotificationCenter } from "react-toastify/addons/useNotificationCenter"\n\nfunction App(){\n  const { notifications } = useNotificationCenter()\n\n  return (\n    <ul>\n      {notifications.map(notification => (\n        <li key={notification.id}>\n          <span>id: {notification.id}</span>\n          <span>createdAt: {notification.createdAt}</span>\n          <p>content: {notification.content}</p>\n          {/* you get the idea, you are free to use the properties the way that best suits your needs */}\n        </li>\n      ))}\n    </ul>\n  )\n}\n')),Object(o.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"The ",Object(o.b)("inlineCode",{parentName:"p"},"content")," contains the value that is displayed when calling the toast function. Use ",Object(o.b)("inlineCode",{parentName:"p"},"data")," if you want more control."))),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { useNotificationCenter } from "react-toastify/addons/useNotificationCenter"\n\ninterface Data {\n  title: string\n  text: string\n}\n\n// somewhere in your app\ntoast("Hello", {\n  data: {\n    title: "Hello",\n    text: "Lorem ipsum dolor..."\n  }\n})\n\nfunction App(){\n  const { notifications } = useNotificationCenter<Data>()\n\n  return (\n    <ul>\n      {notifications.map(notification => (\n        <li key={notification.id}>\n          <span>id: {notification.id}</span>\n          <span>createdAt: {notification.createdAt}</span>\n          <p>title: {notification.data.title}</p>\n          <p>text: {notification.data.text}</p>\n        </li>\n      ))}\n    </ul>\n  )\n}\n')),Object(o.b)("h3",{id:"clear"},Object(o.b)("inlineCode",{parentName:"h3"},"clear")),Object(o.b)("p",null,"Remove all notifications from the notification center."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { useNotificationCenter } from "react-toastify/addons/useNotificationCenter"\n\nfunction App(){\n  const { notifications, clear } = useNotificationCenter()\n\n  return (\n    <div>\n      <button onClick={clear}>clear</button>\n      <div>{notifications.length}</div>\n    </div>\n  )\n}\n')),Object(o.b)("h3",{id:"markallasread"},Object(o.b)("inlineCode",{parentName:"h3"},"markAllAsRead")),Object(o.b)("p",null,"Mark all notifications as read."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { useNotificationCenter } from "react-toastify/addons/useNotificationCenter"\n\nfunction App(){\n  const { notifications, markAllAsRead } = useNotificationCenter()\n\n  return (\n    <div>\n      <button onClick={markAllAsRead}>Mark all as read</button>\n      <ul>\n        {notifications.map(notification => (\n          <li key={notification.id}>\n            <span>read: {notification.read}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n')),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"markAllAsRead")," accepts an optional boolean argument. It's only useful to mark all notifications as not read."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { useNotificationCenter } from "react-toastify/addons/useNotificationCenter"\n\nfunction App(){\n  const { notifications, markAllAsRead } = useNotificationCenter()\n\n  return (\n    <div>\n      <button onClick={() => markAllAsRead(false)}>Mark all as not read</button>\n      <ul>\n        {notifications.map(notification => (\n          <li key={notification.id}>\n            <span>read: {notification.read}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n')),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Calling ",Object(o.b)("inlineCode",{parentName:"p"},"markAllasRead()")," is equivalent to ",Object(o.b)("inlineCode",{parentName:"p"},"markAllAsRead(true)")))),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// function signature\nmarkAllAsRead(read?: boolean): void\n")),Object(o.b)("h3",{id:"markasread"},Object(o.b)("inlineCode",{parentName:"h3"},"markAsRead")),Object(o.b)("p",null,"Mark one or more notifications as read."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { useNotificationCenter } from "react-toastify/addons/useNotificationCenter"\n\nfunction App(){\n  const { notifications, markAsRead } = useNotificationCenter()\n\n  return (\n    <ul>\n      {notifications.map(notification => (\n        <li key={notification.id}>\n          <span>read: {notification.read}</span>\n          <button onClick={() => markAsRead(notification.id)}>mark as read</button>\n        </li>\n      ))}\n    </ul>\n  )\n}\n')),Object(o.b)("p",null,"You can also provide an array of ids to mark multiple notifications as read."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'markAsRead(["a","list", "of", "id"])\n')),Object(o.b)("p",null,"Similar to ",Object(o.b)("inlineCode",{parentName:"p"},"markAllAsRead"),", this function accepts an optional boolean argument. It's only useful to mark the notifications as not read."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'markAsRead(notification.id, false)\n\n// works for an array of ids as well\nmarkAsRead(["a","list", "of", "id"], false)\n')),Object(o.b)("h3",{id:"unreadcount"},Object(o.b)("inlineCode",{parentName:"h3"},"unreadCount")),Object(o.b)("p",null,"Contains the number of unread notifications."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { useNotificationCenter } from "react-toastify/addons/useNotificationCenter"\n\nfunction App(){\n  const { unreadCount } = useNotificationCenter()\n\n  return (\n    <div>{unreadCount}</div>\n  )\n}\n')),Object(o.b)("h3",{id:"remove"},Object(o.b)("inlineCode",{parentName:"h3"},"remove")),Object(o.b)("p",null,"Remove one or more notifications."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { useNotificationCenter } from "react-toastify/addons/useNotificationCenter"\n\nfunction App(){\n  const { notifications, remove } = useNotificationCenter()\n\n  return (\n    <ul>\n      {notifications.map(notification => (\n        <li key={notification.id}>\n          <button onClick={() => remove(notification.id)}>remove</button>\n        </li>\n      ))}\n    </ul>\n  )\n}\n')),Object(o.b)("p",null,"To remove multiple notifications at once, you can pass an array of ids."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'remove(["a","list", "of", "id"])\n')),Object(o.b)("h3",{id:"sort"},Object(o.b)("inlineCode",{parentName:"h3"},"sort")),Object(o.b)("p",null,"By default, the notifications are sorted from the newest to the oldest using the ",Object(o.b)("inlineCode",{parentName:"p"},"createdAt")," field. This can be changed anytime and you are free to use whatever field you want."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { useNotificationCenter, NotificationCenterItem } from "react-toastify/addons/useNotificationCenter"\n\nfunction App(){\n  const { notifications, sort } = useNotificationCenter()\n\n  const sortAsc = () => {\n    sort((l: NotificationCenterItem, r: NotificationCenterItem) => l.createdAt - r.createdAt)\n  }\n\n  return (\n    <div>\n      <button onClick={sortAsc}>Oldest to newest</button>\n      <ul>\n        {notifications.map(notification => (\n          <li key={notification.id}>\n            <span>{notification.id}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n')),Object(o.b)("p",null,"Another example, using a field different from ",Object(o.b)("inlineCode",{parentName:"p"},"createdAt"),". We can imagine that the notification contains an ",Object(o.b)("inlineCode",{parentName:"p"},"order")," field under ",Object(o.b)("inlineCode",{parentName:"p"},"data"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'// somewhere in your app\ntoast("hello", {\n  data: {\n    order: 1\n  }\n})\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { useNotificationCenter, NotificationCenterItem } from "react-toastify/addons/useNotificationCenter"\n\ninterface Data {\n  order: number\n}\n\nfunction App(){\n  const { notifications, sort } = useNotificationCenter<Data>()\n\n  const sortAsc = () => {\n    sort((l: NotificationCenterItem, r: NotificationCenterItem) => l.data.order - r.data.order)\n  }\n\n  return (\n    <div>\n      <button onClick={sortAsc}>Oldest to newest</button>\n      <ul>\n        {notifications.map(notification => (\n          <li key={notification.id}>\n            <span>{notification.id}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n')),Object(o.b)("h3",{id:"add"},Object(o.b)("inlineCode",{parentName:"h3"},"add")),Object(o.b)("p",null,"Let you add a notification without calling ",Object(o.b)("inlineCode",{parentName:"p"},"toast"),". This can be useful in many cases, job listener, global store, etc..."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { useEffect } from "react"\nimport { useNotificationCenter } from "react-toastify/addons/useNotificationCenter"\nimport { jobListener } from "my-job-listener"\n\nfunction App(){\n  const { notifications, add } = useNotificationCenter()\n\n  useEffect(() => {\n    const unsub = jobListener.on("jobCreate",(job) => {\n      add({ id: job.id, content: job.notification.content })\n    })\n  // although the reference of `add` changes for every render\n  // you can safely omit it from the dependency array \n  }, [])\n\n  return (\n    <ul>\n      {notifications.map(notification => (\n        <li key={notification.id}>\n          <span>{notification.id}</span>\n        </li>\n      ))}\n    </ul>\n  )\n}\n')),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"If the id is already in use, the function will return ",Object(o.b)("inlineCode",{parentName:"li"},"null")," and nothing will happens. ")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'add({ id: "an existing id" }) // return null\n')),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"If you omit the ",Object(o.b)("inlineCode",{parentName:"li"},"id"),", one is generated for you.")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'add({ content: "hello" }) // return generated id\n')),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"You can also override the default values for ",Object(o.b)("inlineCode",{parentName:"li"},"createdAt")," and ",Object(o.b)("inlineCode",{parentName:"li"},"read"))),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"add({ \n  // same as default value \ud83d\ude06\n  createdAt: Date.now(),\n  read: true\n})\n")),Object(o.b)("h3",{id:"update"},Object(o.b)("inlineCode",{parentName:"h3"},"update")),Object(o.b)("p",null,"Let you update a notification without calling ",Object(o.b)("inlineCode",{parentName:"p"},"toast.update"),". This can be useful in many cases, job listener, global store, etc..."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { useEffect } from "react"\nimport { useNotificationCenter } from "react-toastify/addons/useNotificationCenter"\nimport { jobListener } from "my-job-listener"\n\nfunction App(){\n  const { notifications, update } = useNotificationCenter()\n\n  useEffect(() => {\n    const unsub = jobListener.on("jobUpdate", (job) => {\n      update(job.id, { content: job.notification.content, data: { jobType: job.type } })\n    })\n  // although the reference of `update` changes for every render\n  // you can safely omit it from the dependency array \n  }, [])\n\n  return (\n    <ul>\n      {notifications.map(notification => (\n        <li key={notification.id}>\n          <span>{notification.id}</span>\n        </li>\n      ))}\n    </ul>\n  )\n}\n')),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"if the given id does not exist, null is returned")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'update("nonExistingId", {content: "hello"}) // return null\n')),Object(o.b)("h3",{id:"find"},Object(o.b)("inlineCode",{parentName:"h3"},"find")),Object(o.b)("p",null,"Let you retrieve one or more notifications. This can be useful in many cases, job listener, global store, etc..."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { useEffect } from "react"\nimport { useNotificationCenter } from "react-toastify/addons/useNotificationCenter"\nimport { jobListener } from "my-job-listener"\n\nfunction App(){\n  const { notifications, find } = useNotificationCenter()\n\n  useEffect(() => {\n    const unsub = jobListener.onChange((job) => {\n      const notification = find(job.id);\n\n      if(notification) {\n        // do something if it already exist, for example update it\n      } else {\n        // do something if it does not exist, for example add it\n      }\n    })\n  // although the reference of `find` changes for every render\n  // you can safely omit it from the dependency array \n  }, [])\n\n  return (\n    <ul>\n      {notifications.map(notification => (\n        <li key={notification.id}>\n          <span>{notification.id}</span>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\n')))}d.isMDXComponent=!0},148:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return f}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),d=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},b=function(e){var t=d(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=d(n),u=a,f=b["".concat(r,".").concat(u)]||b[u]||p[u]||o;return n?i.a.createElement(f,c({ref:t},s,{components:n})):i.a.createElement(f,c({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var s=2;s<o;s++)r[s]=n[s];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);